.dino {
  height: 100vh;
  display: flex;
  align-items: center;
  text-align: center;
  margin: auto;
  justify-content: center;
  img {
    width: 160px;
    height: 160px;
  }
}
input {
  border-radius: 50px;
  width: 50px;
  height: 50px;
  border: solid 0.5px #39d898;
  padding-left: 20px;
}

*,
*:after,
*:before {
  box-sizing: border-box;
}

.input {
  // needs to be relative so the :focus span is positioned correctly
  position: relative;

  // the border gradient
  background: linear-gradient(21deg, #10abff, #1beabd);

  // the width of the input border
  padding: 1px;

  // we want inline fields by default
  display: inline-block;

  // we want rounded corners no matter the size of the field
  border-radius: 9999em;

  // style of the actual input field
  *:not(span) {
    position: relative;
    display: inherit;
    border-radius: inherit;
    margin: 0;
    border: none;
    outline: none;
    z-index: 1; // needs to be above the :focus span

    // summon fancy shadow styles when focussed
    &:focus + span {
      opacity: 1;
      transform: scale(1);
    }
  }

  // we don't animate box-shadow directly as that can't be done on the GPU, only animate opacity and transform for high performance animations.
  span {
    transform: scale(0.993, 0.94); // scale it down just a little bit
    transition: transform 0.5s, opacity 0.25s;
    opacity: 0; // is hidden by default

    position: absolute;
    z-index: 0; // needs to be below the field (would block input otherwise)
    margin: 4px; // a bit bigger than .input padding, this prevents background color pixels shining through
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;
    border-radius: inherit;
    pointer-events: none; // this allows the user to click through this element, as the shadow is rather wide it might overlap with other fields and we don't want to block those.

    // fancy shadow styles
    box-shadow: inset 0 0 0 3px #fff, 0 0 0 4px #fff, 3px -3px 30px #1beabd,
      -3px 3px 30px #10abff;
  }
}

.node {
  display: flex;
  justify-content: center;
}
.nodes {
  display: flex;
  justify-content: center;
  p {
    padding-left: 20px;
    padding-right: 20px;
    position: relative;
    &::after {
      position: absolute;
      content: '';
      width: 2px;
      height: 20px;
      background: red;
      top: 0;
      right: 20px;
      transform: rotate(-33deg);
    }
  }
}
.trees {
  display: flex;
  justify-content: center;
  .tree-node {
    width: 50%;
  }
}